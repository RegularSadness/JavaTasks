Вариант 2 — шифрация
Шифрация (-c) или дешифрация (-d) указанного (в аргументе командной строки) файла. Выходной файл указывается как -o filename.txt, по умолчанию имя формируется из имени входного файла с добавлением расширения.

Алгоритм шифрации XOR. Ключ указывается после -c или -d в шестнадцатеричной системе, длина ключа — любое целое количество байт.

Command Line: ciphxor [-c key] [-d key] inputname.txt [-o outputname.txt]

Кроме самой программы, следует написать автоматические тесты к ней.


z nt,z


Смотрю ваши задания, есть ряд вопросов

1) Почему мы в getMark работаем не так же, как в остальных функциях? Мы обсуждали, что там не так, но вы про это забыли
2) Почему у нас где-то int, где-то Integer?
3) Почему мы не используем handleStudent для того, чтобы сократить код остальных функций?

По второму заданию

1) А почему оно в том же репозитории, а не в отдельном???
2) Аргументы могут идти в любом порядке
4) Вместо функции bufferedWriter просто должен быть try with resources
5) Функции textReader и byteReader тоже лишние, зачем они нужны, если их смысл выражается одной строчкой кода?
5) Если длина ключа будет ноль, что произойдет?
6) В тестах надо замкнуть функцию encrypt на функцию decrypt и проверить, что для любой случайной строки на входе все работает